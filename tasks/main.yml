---
- name: Vérif OS supportée
  fail:
    msg: "OS non supporté {{ ansible_facts['os_family'] }}. Seuls Debian et RedHat supportés."
  when: ansible_facts['os_family'] not in ['Debian', 'RedHat']

- name: Définir les variables selon l'OS
  set_fact:
    apache_user: "{{ 'www-data' if ansible_facts['os_family'] == 'Debian' else 'apache' }}"
    apache_conf_dir: "{{ 'apache2/sites-available' if ansible_facts['os_family'] == 'Debian' else 'httpd/conf.d' }}"
    apache_service: "{{ 'apache2' if ansible_facts['os_family'] == 'Debian' else 'httpd' }}"

- name: Mettre à jour le cache des paquets Ubuntu
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Installe pip pour Python 3 Ubuntu
  apt:
    name: python3-pip
    state: present
  when: ansible_facts['os_family'] == 'Debian'

- name: Installe les modules Python MySQL Ubuntu
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - pymysql
    - mysqlclient
  when: ansible_facts['os_family'] == 'Debian'

- name: Installe pip pour Python 3 Rocky Linux
  package:
    name: python3-pip
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Installe  modules Python MySQL Rocky Linux
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - PyMySQL
    - mysqlclient
    - mysql-connector-python
  when: ansible_facts['os_family'] == 'RedHat'

- name: Installe les paquets requis Ubuntu
  package:
    name: "{{ item }}"
    state: present
  loop:
    - php
    - php-mysqlnd
    - php-cli
    - mariadb-server
    - wget
    - unzip
    - libapache2-mod-php
  when: ansible_facts['os_family'] == 'Debian'

- name: Installe  paquets requis Rocky Linux
  package:
    name: "{{ item }}"
    state: present
  loop:
    - php
    - php-mysqlnd
    - php-cli
    - mariadb-server
    - wget
    - unzip
    - php-httpd 
  when: ansible_facts['os_family'] == 'RedHat'

- name: Supprime la page par défaut apache
  file:
    path: /var/www/html/index.html
    state: absent

- name: Démarre et active MariaDB
  service:
    name: mariadb
    state: started
    enabled: yes

- name: Attendre démarrage de MariaDB
  pause:
    seconds: 10

- name: Configure MariaDB
  block:
    - name: Sécurise l'installation
      mysql_user:
        login_user: root
        login_password: ""
        name: root
        password: "{{ wordpress_db_root_password }}"
        host: localhost
        check_implicit_admin: yes

    - name: Supprime les utilisateurs anonymes
      mysql_user:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        name: ''
        host: '%'
        state: absent

    - name: Supprime la base test
      mysql_db:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        name: test
        state: absent

    - name: Créer la base WordPress
      mysql_db:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        name: "{{ wordpress_db_name }}"
        state: present

    - name: Créer l'utilisateur WordPress
      mysql_user:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        name: "{{ wordpress_db_user }}"
        password: "{{ wordpress_db_password }}"
        host: localhost
        priv: "{{ wordpress_db_name }}.*:ALL"
        state: present

- name: Télécharger WordPress
  get_url:
    url: "{{ wordpress_download_url }}"
    dest: /tmp/latest.zip

- name: Décompresser WordPress
  unarchive:
    src: /tmp/latest.zip
    dest: /tmp
    remote_src: yes

- name: Copier les fichiers WordPress
  copy:
    src: /tmp/wordpress/
    dest: "{{ wordpress_install_dir }}"
    remote_src: yes
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
    mode: '0755'

- name: Configurer wp-config.php
  template:
    src: wp-config.php.j2
    dest: "{{ wordpress_install_dir }}/wp-config.php"
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
    mode: '0640'

- name: Configure Apache
  template:
    src: wordpress.conf.j2
    dest: "/etc/{{ apache_conf_dir }}/wordpress.conf"
    notify: restart apache

- name: Active le module rewrite Ubuntu
  command: a2enmod rewrite
  when: ansible_facts['os_family'] == 'Debian'
  notify: restart apache

- name: Active le site Ubuntu
  command: a2ensite wordpress.conf
  when: ansible_facts['os_family'] == 'Debian'
  notify: restart apache

- name: Démarre apache
  service:
    name: "{{ apache_service }}"
    state: started
    enabled: yes